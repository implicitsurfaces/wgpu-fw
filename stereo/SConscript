import itertools
import os.path

Import('env')

# todo: clone the env

arch = env['ARCH']

SERVE_OUT = '#/html'

EXPORTED_FNS = [
    '_initGL',
    '_size_window',
    '_draw_scene',
    # '_refresh_shaders',
    # '_paste_text'
]

EXPORTED_RUNTIME_FNS = [
    'cwrap',
    'setValue',
]

BUNDLED_FILES = []

data_out = '#/resource'

PROJECT_RESOURCE_EXTS = [
    '.glsl',
    '.wgsl',
]

extra_wasm_linkflags = {
    'EXPORTED_FUNCTIONS'       : ','.join(EXPORTED_FNS),
    'EXPORTED_RUNTIME_METHODS' : ','.join(EXPORTED_RUNTIME_FNS),
}

# here's how the web deploy works:
#   wrapper.ts builds to wrapper.js
#   {module}.js is an auto-generated JS module which loads the compiled WASM
#   {module}.wasm is generated by emscripten together with {module}.js
#   {module}.html includes wrapper.js, {module}.js, and main.css.
#     it passes the canvas object to the wrapper code and sets a callback for when
#     the WASM is loaded
#   wrapper.{ts,js} initializes wrapped C ffi functions, calls resize functions,
#     passes events and other info from the browser, calls requestAnimationFrame().


# no builtin recursive search :(
obj_sources    = [Glob('*/*.cpp'), Glob('*/*/*.cpp'), Glob('*/*/*/*.cpp')]
prog_sources   = Glob('*.cpp')
shader_sources = Glob('shaders/*.wgsl')

indexes = []

programs = []
default_targets = []

if arch == 'wasm':
    preload_flags = itertools.chain(*
        (('--preload-file', env.File(f).abspath) for f in BUNDLED_FILES)
    )
    env.Append(LINKFLAGS=env.subst_wasm_flags(extra_wasm_linkflags))
    env.Append(LINKFLAGS=list(preload_flags))
    module = 'main'
    prog_target = f'{SERVE_OUT}/{module}.js'
    # point a copy of the index at this module.
    # (we have to escape the $ in the substitution string, otherwise
    # scons will treat it as in internal variable and try to replace it)
    index = env.Substfile('#/web/index.html', SUBST_DICT={'%MODULE_NAME%' : module})
    indexes.append(env.InstallAs(f'{SERVE_OUT}/{module}.html', index))
        
    # web boilerplate
    # build ts file to js:
    wrapper = env.Ts(source='#/web/wrapper.ts', target=f'{SERVE_OUT}/wrapper.js')
    # copy main css to serve directory:
    css = env.Install(SERVE_OUT, '#/web/main.css')

    serve_path = env.GetBuildPath(SERVE_OUT)
    serve = env.Command(
        'serve',
        [prog_target, wrapper, css, indexes], 
        f'python3 -m http.server 8000 -d {serve_path}')
    env.Alias('serve', serve)
    default_targets.append(serve)
else:
    for p in prog_sources:
        # remove the path and extension to get the program name
        prog_name     = os.path.splitext(os.path.basename(str(p)))[0]
        prog_target   = f'#/bin/{prog_name}'
        prog = env.Program(prog_target, source=[p, *obj_sources])
        programs.append(prog)

# install shader files
shader_out_dir = os.path.join(data_out, 'shaders')
default_targets.append(
    env.Install(env.Dir(shader_out_dir), shader_sources)
)

Default([*programs, *default_targets])

Return('main')
